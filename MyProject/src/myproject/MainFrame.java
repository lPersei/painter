/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myproject;

import java.awt.image.BufferedImage;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Persei
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public BufferedImage originalPicture = null; //oryginalny obrazek
    public BufferedImage myPicture = null; //zmieniony obrazek
    public int color; //zmienna do wyliczania koloru rysowania
    public int fromColor; //zmienna do wyliczania koloru oryginalnego do zamiany
    public int toColor; //zmienna do wyliczania koloru nowego do zamiany
    Boolean Pressed = false; //indykator naciśnięcia na obszar do rysowania
    Boolean Mode = true; //indykator trybu wskażnika myszy(true - rysowanie, false - zamiana koloru)
    Filters filters = new Filters(); //inicjalizacja filtrów       
            
    public MainFrame() {
        initComponents();
        //wyłaczenie zmiany rozmiaru
        setResizable(false);
        
    }
    /*
    Pobiera wartości sliderów i zmienia kolor tła ColorPanel
    */
    public void GetColor(){
        color = filters.MakePixel(255, RSlider.getValue(), GSlider.getValue(), BSlider.getValue());
        ColorPanel.setBackground(new Color(color));
    }
    /*
    Pobiera wartości sliderów i zmienia kolor tła ColorPanelChanged
    */
    public void GetColorChanged(){     
        toColor = filters.MakePixel(255, RChooseSlider.getValue(), GChooseSlider.getValue(), BChooseSlider.getValue());
        ColorPanelChanged.setBackground(new Color(toColor));
    }
    /*
    Przyjmuje BufferedImage
    Zmienia jego rozmiary żeby obrazek nie był zbyt rozciągnięty
    Jest to zrobione specjalnie dla Icon w Label
    Zwraca BufferedImage
    */
    public BufferedImage resizeImage(BufferedImage originalImage, int type){
	BufferedImage resizedImage = new BufferedImage(PictureBoxLabel.getWidth(), PictureBoxLabel.getHeight(), type);
	Graphics2D g = resizedImage.createGraphics();
	g.drawImage(originalImage,0,0,PictureBoxLabel.getWidth(),PictureBoxLabel.getHeight(),null);
	g.dispose();		
	return resizedImage;
    }
    
    /*
    Tworzy i otwiera okno dialogowe dla otwarcia obrazu
    */
    public void openPicture() throws IOException{       
        JFileChooser fopen = new JFileChooser();
        //Ustawia rozmiary okna dialogowego
        fopen.setPreferredSize(new Dimension(600,500));
        //Ustawiam filtr
        fopen.setFileFilter(new FileNameExtensionFilter("Images", "jpg", "png","bmp"));
        
        int ret = fopen.showDialog(null, "Open"); 
        
        if(ret == JFileChooser.APPROVE_OPTION){
            //inicjalizuje originalPicture z podanego pliku
            originalPicture = ImageIO.read(fopen.getSelectedFile().getAbsoluteFile());
            //typ dla pixeli ustalam na TYPE_INT_ARGB jako defoltowy jeżeli niema albo taki jak w oryginalnym obrazku originalPicture
            int type = originalPicture.getType() == 0? BufferedImage.TYPE_INT_ARGB : originalPicture.getType();
            //zmiana rozmiarów
            myPicture = resizeImage(originalPicture, type);
            //Wstawiam obraz jako Icon w Label
            PictureBoxLabel.setIcon(new ImageIcon(myPicture));
        }       
    }
    /*
    Tworzy i otwiera okno dialogowe dla zapisywania obrazu
    */
    public void savePicture() throws IOException {
        JFileChooser fsave = new JFileChooser();
        fsave.setPreferredSize(new Dimension(600, 500));
        int ret = fsave.showSaveDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION) {
		File file = fsave.getSelectedFile();
                ImageIO.write(myPicture, "png", file);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        XLabel = new javax.swing.JLabel();
        YLabel = new javax.swing.JLabel();
        ImageHolderPanel = new javax.swing.JPanel();
        PictureBoxLabel = new javax.swing.JLabel();
        RSlider = new javax.swing.JSlider();
        GSlider = new javax.swing.JSlider();
        BSlider = new javax.swing.JSlider();
        ColorPanel = new javax.swing.JPanel();
        RtextHolder = new javax.swing.JLabel();
        GtextHolder = new javax.swing.JLabel();
        BtextHolder = new javax.swing.JLabel();
        RChooseSlider = new javax.swing.JSlider();
        ColorPanelChanged = new javax.swing.JPanel();
        ColorPanelOriginal = new javax.swing.JPanel();
        GChooseSlider = new javax.swing.JSlider();
        BChooseSlider = new javax.swing.JSlider();
        DrawButton = new javax.swing.JButton();
        ChooseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SwapButton = new javax.swing.JButton();
        RtextHolder1 = new javax.swing.JLabel();
        RtextHolder2 = new javax.swing.JLabel();
        RtextHolder3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OptOpen = new javax.swing.JMenuItem();
        OptSave = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        OptGray = new javax.swing.JMenuItem();
        OptSepia = new javax.swing.JMenuItem();
        OptNegative = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(javax.swing.UIManager.getDefaults().getColor("Button.disabledForeground"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1239, 846));

        XLabel.setText("X: 0");

        YLabel.setText("Y :0");
        YLabel.setToolTipText("");

        ImageHolderPanel.setBackground(new java.awt.Color(255, 255, 255));
        ImageHolderPanel.setPreferredSize(new java.awt.Dimension(1000, 800));
        ImageHolderPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ImageHolderPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ImageHolderPanelMouseMoved(evt);
            }
        });
        ImageHolderPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ImageHolderPanelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ImageHolderPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ImageHolderPanelMouseReleased(evt);
            }
        });

        PictureBoxLabel.setBackground(new java.awt.Color(153, 153, 153));
        PictureBoxLabel.setName(""); // NOI18N

        javax.swing.GroupLayout ImageHolderPanelLayout = new javax.swing.GroupLayout(ImageHolderPanel);
        ImageHolderPanel.setLayout(ImageHolderPanelLayout);
        ImageHolderPanelLayout.setHorizontalGroup(
            ImageHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PictureBoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        ImageHolderPanelLayout.setVerticalGroup(
            ImageHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PictureBoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );

        RSlider.setMaximum(255);
        RSlider.setValue(255);
        RSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RSliderStateChanged(evt);
            }
        });

        GSlider.setMaximum(255);
        GSlider.setValue(255);
        GSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GSliderStateChanged(evt);
            }
        });

        BSlider.setMaximum(255);
        BSlider.setValue(255);
        BSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BSliderStateChanged(evt);
            }
        });

        ColorPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout ColorPanelLayout = new javax.swing.GroupLayout(ColorPanel);
        ColorPanel.setLayout(ColorPanelLayout);
        ColorPanelLayout.setHorizontalGroup(
            ColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        ColorPanelLayout.setVerticalGroup(
            ColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        RtextHolder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RtextHolder.setText("R");

        GtextHolder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        GtextHolder.setText("G");

        BtextHolder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtextHolder.setText("B");

        RChooseSlider.setMaximum(255);
        RChooseSlider.setValue(255);
        RChooseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RChooseSliderStateChanged(evt);
            }
        });

        ColorPanelChanged.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout ColorPanelChangedLayout = new javax.swing.GroupLayout(ColorPanelChanged);
        ColorPanelChanged.setLayout(ColorPanelChangedLayout);
        ColorPanelChangedLayout.setHorizontalGroup(
            ColorPanelChangedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        ColorPanelChangedLayout.setVerticalGroup(
            ColorPanelChangedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        ColorPanelOriginal.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout ColorPanelOriginalLayout = new javax.swing.GroupLayout(ColorPanelOriginal);
        ColorPanelOriginal.setLayout(ColorPanelOriginalLayout);
        ColorPanelOriginalLayout.setHorizontalGroup(
            ColorPanelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        ColorPanelOriginalLayout.setVerticalGroup(
            ColorPanelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        GChooseSlider.setMaximum(255);
        GChooseSlider.setValue(255);
        GChooseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GChooseSliderStateChanged(evt);
            }
        });

        BChooseSlider.setMaximum(255);
        BChooseSlider.setValue(255);
        BChooseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BChooseSliderStateChanged(evt);
            }
        });

        DrawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myproject/pointer_click_arrow_mouse_cursor-512.png"))); // NOI18N
        DrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawButtonActionPerformed(evt);
            }
        });

        ChooseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/myproject/ColorSwap.jpg"))); // NOI18N
        ChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Rysowanie");

        jLabel2.setText("Zamiana koloru");

        jLabel3.setText("----->");
        jLabel3.setToolTipText("");

        SwapButton.setText("Change Color");
        SwapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwapButtonActionPerformed(evt);
            }
        });

        RtextHolder1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RtextHolder1.setText("R");

        RtextHolder2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RtextHolder2.setText("G");

        RtextHolder3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RtextHolder3.setText("B");

        jMenu1.setText("File");

        OptOpen.setText("Open");
        OptOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptOpenActionPerformed(evt);
            }
        });
        jMenu1.add(OptOpen);

        OptSave.setText("Save");
        OptSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptSaveActionPerformed(evt);
            }
        });
        jMenu1.add(OptSave);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filters");

        OptGray.setText("Gray");
        OptGray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptGrayActionPerformed(evt);
            }
        });
        jMenu2.add(OptGray);

        OptSepia.setText("Sepia");
        OptSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptSepiaActionPerformed(evt);
            }
        });
        jMenu2.add(OptSepia);

        OptNegative.setText("Negative");
        OptNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptNegativeActionPerformed(evt);
            }
        });
        jMenu2.add(OptNegative);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(YLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(XLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(10, 10, 10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(RSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                            .addComponent(GSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(BSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(ColorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(ColorPanelOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(ColorPanelChanged, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(GtextHolder)
                                                    .addComponent(RtextHolder))
                                                .addGap(14, 14, 14))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(BtextHolder)
                                                .addGap(17, 17, 17)))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(BChooseSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                    .addComponent(GChooseSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(ChooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(DrawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1))
                                    .addComponent(RChooseSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RtextHolder3)
                                    .addComponent(RtextHolder2)
                                    .addComponent(RtextHolder1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(SwapButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(ImageHolderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ImageHolderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DrawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel2)))
                        .addGap(50, 50, 50)
                        .addComponent(ColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RtextHolder))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GtextHolder)
                            .addComponent(GSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtextHolder)
                            .addComponent(BSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ColorPanelChanged, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ColorPanelOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel3)
                                .addGap(16, 16, 16)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RChooseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RtextHolder1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GChooseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RtextHolder2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RtextHolder3)
                            .addComponent(BChooseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SwapButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(XLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(YLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    Obsługa menu
    */
    private void OptOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptOpenActionPerformed
        try {
            openPicture();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_OptOpenActionPerformed
    /*
    Uruchamia Filtr oraz wyświetla komunikat jeżeli nie było otwarto obrazku
    */
    private void OptGrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptGrayActionPerformed
        if (originalPicture == null) {
            JOptionPane.showMessageDialog(null, "Open the image first", "InfoBox: " + "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
        else PictureBoxLabel.setIcon(new ImageIcon(filters.GrayFilter(myPicture)));
    }//GEN-LAST:event_OptGrayActionPerformed
    //Zmienia Pressed na true po naciskaniu na obszar dla rysowania
    private void ImageHolderPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageHolderPanelMousePressed
        Pressed = true;         
    }//GEN-LAST:event_ImageHolderPanelMousePressed
    //Wyświetla koordynaty oraz zamienia kursor 
    private void ImageHolderPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageHolderPanelMouseMoved
        XLabel.setText("X: "+String.valueOf(evt.getX()));
        YLabel.setText("Y: "+String.valueOf(evt.getY()));
        setCursor(Cursor.CROSSHAIR_CURSOR);       
    }//GEN-LAST:event_ImageHolderPanelMouseMoved
        //Zmienia Pressed na true po opuszczeniu przycisku oraz wybiera kolor jeżeli był włączony
    private void ImageHolderPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageHolderPanelMouseReleased
        Pressed = false;
        if(!Mode){
            fromColor = myPicture.getRGB(evt.getX(), evt.getY());
            ColorPanelOriginal.setBackground(new Color(fromColor));
        }
    }//GEN-LAST:event_ImageHolderPanelMouseReleased
    //Po ruchaniu wciśniętą myszą wstawia piksel i odrazu wyświetla zmieniony obrazek 
    private void ImageHolderPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageHolderPanelMouseDragged
        if (Mode) {
            if (Pressed) {
                myPicture.setRGB(evt.getX(), evt.getY(), color);
                PictureBoxLabel.setIcon(new ImageIcon(myPicture)); 
            }                   
        }
    }//GEN-LAST:event_ImageHolderPanelMouseDragged
    //Obsługa sliderów do zmiany koloru dla rysowania
    private void RSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RSliderStateChanged
        GetColor();
    }//GEN-LAST:event_RSliderStateChanged

    private void BSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BSliderStateChanged
        GetColor();
    }//GEN-LAST:event_BSliderStateChanged

    private void GSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GSliderStateChanged
        GetColor();
    }//GEN-LAST:event_GSliderStateChanged
    /*
    Uruchamia Filtr oraz wyświetla komunikat jeżeli nie było otwarto obrazku
    */
    private void OptSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptSepiaActionPerformed
        if (originalPicture == null) {
            JOptionPane.showMessageDialog(null, "Open the image first", "InfoBox: " + "Warning", JOptionPane.INFORMATION_MESSAGE);
        } else PictureBoxLabel.setIcon(new ImageIcon(filters.SepiaFilter(myPicture)));
    }//GEN-LAST:event_OptSepiaActionPerformed
    //Po wyjściu za obszar dla rysowania zmienia kursor na defoltowy
    private void ImageHolderPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageHolderPanelMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_ImageHolderPanelMouseExited
    /*
    Uruchamia Filtr oraz wyświetla komunikat jeżeli nie było otwarto obrazku
    */
    private void OptNegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptNegativeActionPerformed
        if (originalPicture == null) {
            JOptionPane.showMessageDialog(null, "Open the image first", "InfoBox: " + "Warning", JOptionPane.INFORMATION_MESSAGE);
        } else PictureBoxLabel.setIcon(new ImageIcon(filters.NegativeFilter(myPicture)));
    }//GEN-LAST:event_OptNegativeActionPerformed
    //Obsługa menu
    private void OptSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptSaveActionPerformed
        try {
            savePicture();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_OptSaveActionPerformed
    //Obsługa sliderów do wyboru koloru zamiany
    private void RChooseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RChooseSliderStateChanged
        GetColorChanged();
    }//GEN-LAST:event_RChooseSliderStateChanged

    private void GChooseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GChooseSliderStateChanged
        GetColorChanged();
    }//GEN-LAST:event_GChooseSliderStateChanged

    private void BChooseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BChooseSliderStateChanged
        GetColorChanged();
    }//GEN-LAST:event_BChooseSliderStateChanged
    //Zmiana trybu przy naciśnięciu na rysowanie
    private void DrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawButtonActionPerformed
        Mode = true;
    }//GEN-LAST:event_DrawButtonActionPerformed
    //Zmiana trybu przy naciśnięciu na wybór coloru
    private void ChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseButtonActionPerformed
        Mode = false;
    }//GEN-LAST:event_ChooseButtonActionPerformed
    //Zamiana koloru oraz wyświetla komunikat jeżeli nie było otwarto obrazku
    private void SwapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwapButtonActionPerformed
        if (originalPicture == null) {
            JOptionPane.showMessageDialog(null, "Open the image first", "InfoBox: " + "Warning", JOptionPane.INFORMATION_MESSAGE);
        } else PictureBoxLabel.setIcon(new ImageIcon(filters.ChangeFilter(myPicture,fromColor,toColor)));
    }//GEN-LAST:event_SwapButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider BChooseSlider;
    private javax.swing.JSlider BSlider;
    private javax.swing.JLabel BtextHolder;
    private javax.swing.JButton ChooseButton;
    private javax.swing.JPanel ColorPanel;
    private javax.swing.JPanel ColorPanelChanged;
    private javax.swing.JPanel ColorPanelOriginal;
    private javax.swing.JButton DrawButton;
    private javax.swing.JSlider GChooseSlider;
    private javax.swing.JSlider GSlider;
    private javax.swing.JLabel GtextHolder;
    public javax.swing.JPanel ImageHolderPanel;
    private javax.swing.JMenuItem OptGray;
    private javax.swing.JMenuItem OptNegative;
    private javax.swing.JMenuItem OptOpen;
    private javax.swing.JMenuItem OptSave;
    private javax.swing.JMenuItem OptSepia;
    private javax.swing.JLabel PictureBoxLabel;
    private javax.swing.JSlider RChooseSlider;
    private javax.swing.JSlider RSlider;
    private javax.swing.JLabel RtextHolder;
    private javax.swing.JLabel RtextHolder1;
    private javax.swing.JLabel RtextHolder2;
    private javax.swing.JLabel RtextHolder3;
    private javax.swing.JButton SwapButton;
    private javax.swing.JLabel XLabel;
    private javax.swing.JLabel YLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
